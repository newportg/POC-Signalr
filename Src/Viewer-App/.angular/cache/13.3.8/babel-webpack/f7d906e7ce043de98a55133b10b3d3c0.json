{"ast":null,"code":"\"use strict\"; // Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\NEWPORTG\\\\source\\\\Personal\\\\Azure Functions\\\\POC-Sendmail\\\\Src\\\\Viewer-App\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransportSendQueue = exports.HttpConnection = void 0;\n\nconst AccessTokenHttpClient_1 = require(\"./AccessTokenHttpClient\");\n\nconst DefaultHttpClient_1 = require(\"./DefaultHttpClient\");\n\nconst Errors_1 = require(\"./Errors\");\n\nconst ILogger_1 = require(\"./ILogger\");\n\nconst ITransport_1 = require(\"./ITransport\");\n\nconst LongPollingTransport_1 = require(\"./LongPollingTransport\");\n\nconst ServerSentEventsTransport_1 = require(\"./ServerSentEventsTransport\");\n\nconst Utils_1 = require(\"./Utils\");\n\nconst WebSocketTransport_1 = require(\"./WebSocketTransport\");\n\nconst MAX_REDIRECTS = 100;\n/** @private */\n\nclass HttpConnection {\n  constructor(url, options = {}) {\n    this._stopPromiseResolver = () => {};\n\n    this.features = {};\n    this._negotiateVersion = 1;\n    Utils_1.Arg.isRequired(url, \"url\");\n    this._logger = Utils_1.createLogger(options.logger);\n    this.baseUrl = this._resolveUrl(url);\n    options = options || {};\n    options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\n\n    if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\n      options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\n    } else {\n      throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\n    }\n\n    options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\n    let webSocketModule = null;\n    let eventSourceModule = null;\n\n    if (Utils_1.Platform.isNode && typeof require !== \"undefined\") {\n      // In order to ignore the dynamic require in webpack builds we need to do this magic\n      // @ts-ignore: TS doesn't know about these names\n      const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\n      webSocketModule = requireFunc(\"ws\");\n      eventSourceModule = requireFunc(\"eventsource\");\n    }\n\n    if (!Utils_1.Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\n      options.WebSocket = WebSocket;\n    } else if (Utils_1.Platform.isNode && !options.WebSocket) {\n      if (webSocketModule) {\n        options.WebSocket = webSocketModule;\n      }\n    }\n\n    if (!Utils_1.Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\n      options.EventSource = EventSource;\n    } else if (Utils_1.Platform.isNode && !options.EventSource) {\n      if (typeof eventSourceModule !== \"undefined\") {\n        options.EventSource = eventSourceModule;\n      }\n    }\n\n    this._httpClient = new AccessTokenHttpClient_1.AccessTokenHttpClient(options.httpClient || new DefaultHttpClient_1.DefaultHttpClient(this._logger), options.accessTokenFactory);\n    this._connectionState = \"Disconnected\"\n    /* Disconnected */\n    ;\n    this._connectionStarted = false;\n    this._options = options;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n\n  start(transferFormat) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      transferFormat = transferFormat || ITransport_1.TransferFormat.Binary;\n      Utils_1.Arg.isIn(transferFormat, ITransport_1.TransferFormat, \"transferFormat\");\n\n      _this._logger.log(ILogger_1.LogLevel.Debug, `Starting connection with transfer format '${ITransport_1.TransferFormat[transferFormat]}'.`);\n\n      if (_this._connectionState !== \"Disconnected\"\n      /* Disconnected */\n      ) {\n        return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\n      }\n\n      _this._connectionState = \"Connecting\"\n      /* Connecting */\n      ;\n      _this._startInternalPromise = _this._startInternal(transferFormat);\n      yield _this._startInternalPromise; // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\n\n      if (_this._connectionState === \"Disconnecting\"\n      /* Disconnecting */\n      ) {\n        // stop() was called and transitioned the client into the Disconnecting state.\n        const message = \"Failed to start the HttpConnection before stop() was called.\";\n\n        _this._logger.log(ILogger_1.LogLevel.Error, message); // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\n\n\n        yield _this._stopPromise;\n        return Promise.reject(new Errors_1.AbortError(message));\n      } else if (_this._connectionState !== \"Connected\"\n      /* Connected */\n      ) {\n        // stop() was called and transitioned the client into the Disconnecting state.\n        const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\n\n        _this._logger.log(ILogger_1.LogLevel.Error, message);\n\n        return Promise.reject(new Errors_1.AbortError(message));\n      }\n\n      _this._connectionStarted = true;\n    })();\n  }\n\n  send(data) {\n    if (this._connectionState !== \"Connected\"\n    /* Connected */\n    ) {\n      return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\n    }\n\n    if (!this._sendQueue) {\n      this._sendQueue = new TransportSendQueue(this.transport);\n    } // Transport will not be null if state is connected\n\n\n    return this._sendQueue.send(data);\n  }\n\n  stop(error) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2._connectionState === \"Disconnected\"\n      /* Disconnected */\n      ) {\n        _this2._logger.log(ILogger_1.LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\n\n        return Promise.resolve();\n      }\n\n      if (_this2._connectionState === \"Disconnecting\"\n      /* Disconnecting */\n      ) {\n        _this2._logger.log(ILogger_1.LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\n\n        return _this2._stopPromise;\n      }\n\n      _this2._connectionState = \"Disconnecting\"\n      /* Disconnecting */\n      ;\n      _this2._stopPromise = new Promise(resolve => {\n        // Don't complete stop() until stopConnection() completes.\n        _this2._stopPromiseResolver = resolve;\n      }); // stopInternal should never throw so just observe it.\n\n      yield _this2._stopInternal(error);\n      yield _this2._stopPromise;\n    })();\n  }\n\n  _stopInternal(error) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      // Set error as soon as possible otherwise there is a race between\n      // the transport closing and providing an error and the error from a close message\n      // We would prefer the close message error.\n      _this3._stopError = error;\n\n      try {\n        yield _this3._startInternalPromise;\n      } catch (e) {// This exception is returned to the user as a rejected Promise from the start method.\n      } // The transport's onclose will trigger stopConnection which will run our onclose event.\n      // The transport should always be set if currently connected. If it wasn't set, it's likely because\n      // stop was called during start() and start() failed.\n\n\n      if (_this3.transport) {\n        try {\n          yield _this3.transport.stop();\n        } catch (e) {\n          _this3._logger.log(ILogger_1.LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\n\n          _this3._stopConnection();\n        }\n\n        _this3.transport = undefined;\n      } else {\n        _this3._logger.log(ILogger_1.LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\n      }\n    })();\n  }\n\n  _startInternal(transferFormat) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // Store the original base url and the access token factory since they may change\n      // as part of negotiating\n      let url = _this4.baseUrl;\n      _this4._accessTokenFactory = _this4._options.accessTokenFactory;\n      _this4._httpClient._accessTokenFactory = _this4._accessTokenFactory;\n\n      try {\n        if (_this4._options.skipNegotiation) {\n          if (_this4._options.transport === ITransport_1.HttpTransportType.WebSockets) {\n            // No need to add a connection ID in this case\n            _this4.transport = _this4._constructTransport(ITransport_1.HttpTransportType.WebSockets); // We should just call connect directly in this case.\n            // No fallback or negotiate in this case.\n\n            yield _this4._startTransport(url, transferFormat);\n          } else {\n            throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\n          }\n        } else {\n          let negotiateResponse = null;\n          let redirects = 0;\n\n          do {\n            negotiateResponse = yield _this4._getNegotiationResponse(url); // the user tries to stop the connection when it is being started\n\n            if (_this4._connectionState === \"Disconnecting\"\n            /* Disconnecting */\n            || _this4._connectionState === \"Disconnected\"\n            /* Disconnected */\n            ) {\n              throw new Errors_1.AbortError(\"The connection was stopped during negotiation.\");\n            }\n\n            if (negotiateResponse.error) {\n              throw new Error(negotiateResponse.error);\n            }\n\n            if (negotiateResponse.ProtocolVersion) {\n              throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\n            }\n\n            if (negotiateResponse.url) {\n              url = negotiateResponse.url;\n            }\n\n            if (negotiateResponse.accessToken) {\n              // Replace the current access token factory with one that uses\n              // the returned access token\n              const accessToken = negotiateResponse.accessToken;\n\n              _this4._accessTokenFactory = () => accessToken; // set the factory to undefined so the AccessTokenHttpClient won't retry with the same token, since we know it won't change until a connection restart\n\n\n              _this4._httpClient._accessToken = accessToken;\n              _this4._httpClient._accessTokenFactory = undefined;\n            }\n\n            redirects++;\n          } while (negotiateResponse.url && redirects < MAX_REDIRECTS);\n\n          if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\n            throw new Error(\"Negotiate redirection limit exceeded.\");\n          }\n\n          yield _this4._createTransport(url, _this4._options.transport, negotiateResponse, transferFormat);\n        }\n\n        if (_this4.transport instanceof LongPollingTransport_1.LongPollingTransport) {\n          _this4.features.inherentKeepAlive = true;\n        }\n\n        if (_this4._connectionState === \"Connecting\"\n        /* Connecting */\n        ) {\n          // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\n          // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\n          _this4._logger.log(ILogger_1.LogLevel.Debug, \"The HttpConnection connected successfully.\");\n\n          _this4._connectionState = \"Connected\"\n          /* Connected */\n          ;\n        } // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\n        // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\n        // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\n\n      } catch (e) {\n        _this4._logger.log(ILogger_1.LogLevel.Error, \"Failed to start the connection: \" + e);\n\n        _this4._connectionState = \"Disconnected\"\n        /* Disconnected */\n        ;\n        _this4.transport = undefined; // if start fails, any active calls to stop assume that start will complete the stop promise\n\n        _this4._stopPromiseResolver();\n\n        return Promise.reject(e);\n      }\n    })();\n  }\n\n  _getNegotiationResponse(url) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const headers = {};\n      const [name, value] = Utils_1.getUserAgentHeader();\n      headers[name] = value;\n\n      const negotiateUrl = _this5._resolveNegotiateUrl(url);\n\n      _this5._logger.log(ILogger_1.LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\n\n      try {\n        const response = yield _this5._httpClient.post(negotiateUrl, {\n          content: \"\",\n          headers: { ...headers,\n            ..._this5._options.headers\n          },\n          timeout: _this5._options.timeout,\n          withCredentials: _this5._options.withCredentials\n        });\n\n        if (response.statusCode !== 200) {\n          return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\n        }\n\n        const negotiateResponse = JSON.parse(response.content);\n\n        if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\n          // Negotiate version 0 doesn't use connectionToken\n          // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\n          negotiateResponse.connectionToken = negotiateResponse.connectionId;\n        }\n\n        return negotiateResponse;\n      } catch (e) {\n        let errorMessage = \"Failed to complete negotiation with the server: \" + e;\n\n        if (e instanceof Errors_1.HttpError) {\n          if (e.statusCode === 404) {\n            errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\n          }\n        }\n\n        _this5._logger.log(ILogger_1.LogLevel.Error, errorMessage);\n\n        return Promise.reject(new Errors_1.FailedToNegotiateWithServerError(errorMessage));\n      }\n    })();\n  }\n\n  _createConnectUrl(url, connectionToken) {\n    if (!connectionToken) {\n      return url;\n    }\n\n    return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\n  }\n\n  _createTransport(url, requestedTransport, negotiateResponse, requestedTransferFormat) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      let connectUrl = _this6._createConnectUrl(url, negotiateResponse.connectionToken);\n\n      if (_this6._isITransport(requestedTransport)) {\n        _this6._logger.log(ILogger_1.LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\n\n        _this6.transport = requestedTransport;\n        yield _this6._startTransport(connectUrl, requestedTransferFormat);\n        _this6.connectionId = negotiateResponse.connectionId;\n        return;\n      }\n\n      const transportExceptions = [];\n      const transports = negotiateResponse.availableTransports || [];\n      let negotiate = negotiateResponse;\n\n      for (const endpoint of transports) {\n        const transportOrError = _this6._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\n\n        if (transportOrError instanceof Error) {\n          // Store the error and continue, we don't want to cause a re-negotiate in these cases\n          transportExceptions.push(`${endpoint.transport} failed:`);\n          transportExceptions.push(transportOrError);\n        } else if (_this6._isITransport(transportOrError)) {\n          _this6.transport = transportOrError;\n\n          if (!negotiate) {\n            try {\n              negotiate = yield _this6._getNegotiationResponse(url);\n            } catch (ex) {\n              return Promise.reject(ex);\n            }\n\n            connectUrl = _this6._createConnectUrl(url, negotiate.connectionToken);\n          }\n\n          try {\n            yield _this6._startTransport(connectUrl, requestedTransferFormat);\n            _this6.connectionId = negotiate.connectionId;\n            return;\n          } catch (ex) {\n            _this6._logger.log(ILogger_1.LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\n\n            negotiate = undefined;\n            transportExceptions.push(new Errors_1.FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, ITransport_1.HttpTransportType[endpoint.transport]));\n\n            if (_this6._connectionState !== \"Connecting\"\n            /* Connecting */\n            ) {\n              const message = \"Failed to select transport before stop() was called.\";\n\n              _this6._logger.log(ILogger_1.LogLevel.Debug, message);\n\n              return Promise.reject(new Errors_1.AbortError(message));\n            }\n          }\n        }\n      }\n\n      if (transportExceptions.length > 0) {\n        return Promise.reject(new Errors_1.AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\n      }\n\n      return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\n    })();\n  }\n\n  _constructTransport(transport) {\n    switch (transport) {\n      case ITransport_1.HttpTransportType.WebSockets:\n        if (!this._options.WebSocket) {\n          throw new Error(\"'WebSocket' is not supported in your environment.\");\n        }\n\n        return new WebSocketTransport_1.WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent, this._options.WebSocket, this._options.headers || {});\n\n      case ITransport_1.HttpTransportType.ServerSentEvents:\n        if (!this._options.EventSource) {\n          throw new Error(\"'EventSource' is not supported in your environment.\");\n        }\n\n        return new ServerSentEventsTransport_1.ServerSentEventsTransport(this._httpClient, this._httpClient._accessToken, this._logger, this._options);\n\n      case ITransport_1.HttpTransportType.LongPolling:\n        return new LongPollingTransport_1.LongPollingTransport(this._httpClient, this._logger, this._options);\n\n      default:\n        throw new Error(`Unknown transport: ${transport}.`);\n    }\n  }\n\n  _startTransport(url, transferFormat) {\n    this.transport.onreceive = this.onreceive;\n\n    this.transport.onclose = e => this._stopConnection(e);\n\n    return this.transport.connect(url, transferFormat);\n  }\n\n  _resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat) {\n    const transport = ITransport_1.HttpTransportType[endpoint.transport];\n\n    if (transport === null || transport === undefined) {\n      this._logger.log(ILogger_1.LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\n\n      return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\n    } else {\n      if (transportMatches(requestedTransport, transport)) {\n        const transferFormats = endpoint.transferFormats.map(s => ITransport_1.TransferFormat[s]);\n\n        if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\n          if (transport === ITransport_1.HttpTransportType.WebSockets && !this._options.WebSocket || transport === ITransport_1.HttpTransportType.ServerSentEvents && !this._options.EventSource) {\n            this._logger.log(ILogger_1.LogLevel.Debug, `Skipping transport '${ITransport_1.HttpTransportType[transport]}' because it is not supported in your environment.'`);\n\n            return new Errors_1.UnsupportedTransportError(`'${ITransport_1.HttpTransportType[transport]}' is not supported in your environment.`, transport);\n          } else {\n            this._logger.log(ILogger_1.LogLevel.Debug, `Selecting transport '${ITransport_1.HttpTransportType[transport]}'.`);\n\n            try {\n              return this._constructTransport(transport);\n            } catch (ex) {\n              return ex;\n            }\n          }\n        } else {\n          this._logger.log(ILogger_1.LogLevel.Debug, `Skipping transport '${ITransport_1.HttpTransportType[transport]}' because it does not support the requested transfer format '${ITransport_1.TransferFormat[requestedTransferFormat]}'.`);\n\n          return new Error(`'${ITransport_1.HttpTransportType[transport]}' does not support ${ITransport_1.TransferFormat[requestedTransferFormat]}.`);\n        }\n      } else {\n        this._logger.log(ILogger_1.LogLevel.Debug, `Skipping transport '${ITransport_1.HttpTransportType[transport]}' because it was disabled by the client.`);\n\n        return new Errors_1.DisabledTransportError(`'${ITransport_1.HttpTransportType[transport]}' is disabled by the client.`, transport);\n      }\n    }\n  }\n\n  _isITransport(transport) {\n    return transport && typeof transport === \"object\" && \"connect\" in transport;\n  }\n\n  _stopConnection(error) {\n    this._logger.log(ILogger_1.LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\n\n    this.transport = undefined; // If we have a stopError, it takes precedence over the error from the transport\n\n    error = this._stopError || error;\n    this._stopError = undefined;\n\n    if (this._connectionState === \"Disconnected\"\n    /* Disconnected */\n    ) {\n      this._logger.log(ILogger_1.LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\n\n      return;\n    }\n\n    if (this._connectionState === \"Connecting\"\n    /* Connecting */\n    ) {\n      this._logger.log(ILogger_1.LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\n\n      throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\n    }\n\n    if (this._connectionState === \"Disconnecting\"\n    /* Disconnecting */\n    ) {\n      // A call to stop() induced this call to stopConnection and needs to be completed.\n      // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\n      this._stopPromiseResolver();\n    }\n\n    if (error) {\n      this._logger.log(ILogger_1.LogLevel.Error, `Connection disconnected with error '${error}'.`);\n    } else {\n      this._logger.log(ILogger_1.LogLevel.Information, \"Connection disconnected.\");\n    }\n\n    if (this._sendQueue) {\n      this._sendQueue.stop().catch(e => {\n        this._logger.log(ILogger_1.LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\n      });\n\n      this._sendQueue = undefined;\n    }\n\n    this.connectionId = undefined;\n    this._connectionState = \"Disconnected\"\n    /* Disconnected */\n    ;\n\n    if (this._connectionStarted) {\n      this._connectionStarted = false;\n\n      try {\n        if (this.onclose) {\n          this.onclose(error);\n        }\n      } catch (e) {\n        this._logger.log(ILogger_1.LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\n      }\n    }\n  }\n\n  _resolveUrl(url) {\n    // startsWith is not supported in IE\n    if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\n      return url;\n    }\n\n    if (!Utils_1.Platform.isBrowser) {\n      throw new Error(`Cannot resolve '${url}'.`);\n    } // Setting the url to the href propery of an anchor tag handles normalization\n    // for us. There are 3 main cases.\n    // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\n    // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\n    // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\n\n\n    const aTag = window.document.createElement(\"a\");\n    aTag.href = url;\n\n    this._logger.log(ILogger_1.LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\n\n    return aTag.href;\n  }\n\n  _resolveNegotiateUrl(url) {\n    const index = url.indexOf(\"?\");\n    let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\n\n    if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\n      negotiateUrl += \"/\";\n    }\n\n    negotiateUrl += \"negotiate\";\n    negotiateUrl += index === -1 ? \"\" : url.substring(index);\n\n    if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\n      negotiateUrl += index === -1 ? \"?\" : \"&\";\n      negotiateUrl += \"negotiateVersion=\" + this._negotiateVersion;\n    }\n\n    return negotiateUrl;\n  }\n\n}\n\nexports.HttpConnection = HttpConnection;\n\nfunction transportMatches(requestedTransport, actualTransport) {\n  return !requestedTransport || (actualTransport & requestedTransport) !== 0;\n}\n/** @private */\n\n\nclass TransportSendQueue {\n  constructor(_transport) {\n    this._transport = _transport;\n    this._buffer = [];\n    this._executing = true;\n    this._sendBufferedData = new PromiseSource();\n    this._transportResult = new PromiseSource();\n    this._sendLoopPromise = this._sendLoop();\n  }\n\n  send(data) {\n    this._bufferData(data);\n\n    if (!this._transportResult) {\n      this._transportResult = new PromiseSource();\n    }\n\n    return this._transportResult.promise;\n  }\n\n  stop() {\n    this._executing = false;\n\n    this._sendBufferedData.resolve();\n\n    return this._sendLoopPromise;\n  }\n\n  _bufferData(data) {\n    if (this._buffer.length && typeof this._buffer[0] !== typeof data) {\n      throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof data}`);\n    }\n\n    this._buffer.push(data);\n\n    this._sendBufferedData.resolve();\n  }\n\n  _sendLoop() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      while (true) {\n        yield _this7._sendBufferedData.promise;\n\n        if (!_this7._executing) {\n          if (_this7._transportResult) {\n            _this7._transportResult.reject(\"Connection stopped.\");\n          }\n\n          break;\n        }\n\n        _this7._sendBufferedData = new PromiseSource();\n        const transportResult = _this7._transportResult;\n        _this7._transportResult = undefined;\n        const data = typeof _this7._buffer[0] === \"string\" ? _this7._buffer.join(\"\") : TransportSendQueue._concatBuffers(_this7._buffer);\n        _this7._buffer.length = 0;\n\n        try {\n          yield _this7._transport.send(data);\n          transportResult.resolve();\n        } catch (error) {\n          transportResult.reject(error);\n        }\n      }\n    })();\n  }\n\n  static _concatBuffers(arrayBuffers) {\n    const totalLength = arrayBuffers.map(b => b.byteLength).reduce((a, b) => a + b);\n    const result = new Uint8Array(totalLength);\n    let offset = 0;\n\n    for (const item of arrayBuffers) {\n      result.set(new Uint8Array(item), offset);\n      offset += item.byteLength;\n    }\n\n    return result.buffer;\n  }\n\n}\n\nexports.TransportSendQueue = TransportSendQueue;\n\nclass PromiseSource {\n  constructor() {\n    this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\n  }\n\n  resolve() {\n    this._resolver();\n  }\n\n  reject(reason) {\n    this._rejecter(reason);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/NEWPORTG/source/Personal/Azure Functions/POC-Sendmail/node_modules/@microsoft/signalr/dist/cjs/HttpConnection.js"],"names":["Object","defineProperty","exports","value","TransportSendQueue","HttpConnection","AccessTokenHttpClient_1","require","DefaultHttpClient_1","Errors_1","ILogger_1","ITransport_1","LongPollingTransport_1","ServerSentEventsTransport_1","Utils_1","WebSocketTransport_1","MAX_REDIRECTS","constructor","url","options","_stopPromiseResolver","features","_negotiateVersion","Arg","isRequired","_logger","createLogger","logger","baseUrl","_resolveUrl","logMessageContent","undefined","withCredentials","Error","timeout","webSocketModule","eventSourceModule","Platform","isNode","requireFunc","__webpack_require__","__non_webpack_require__","WebSocket","EventSource","_httpClient","AccessTokenHttpClient","httpClient","DefaultHttpClient","accessTokenFactory","_connectionState","_connectionStarted","_options","onreceive","onclose","start","transferFormat","TransferFormat","Binary","isIn","log","LogLevel","Debug","Promise","reject","_startInternalPromise","_startInternal","message","_stopPromise","AbortError","send","data","_sendQueue","transport","stop","error","resolve","_stopInternal","_stopError","e","_stopConnection","_accessTokenFactory","skipNegotiation","HttpTransportType","WebSockets","_constructTransport","_startTransport","negotiateResponse","redirects","_getNegotiationResponse","ProtocolVersion","accessToken","_accessToken","_createTransport","LongPollingTransport","inherentKeepAlive","headers","name","getUserAgentHeader","negotiateUrl","_resolveNegotiateUrl","response","post","content","statusCode","JSON","parse","negotiateVersion","connectionToken","connectionId","errorMessage","HttpError","FailedToNegotiateWithServerError","_createConnectUrl","indexOf","requestedTransport","requestedTransferFormat","connectUrl","_isITransport","transportExceptions","transports","availableTransports","negotiate","endpoint","transportOrError","_resolveTransportOrError","push","ex","FailedToStartTransportError","length","AggregateErrors","join","WebSocketTransport","ServerSentEvents","ServerSentEventsTransport","LongPolling","connect","transportMatches","transferFormats","map","s","UnsupportedTransportError","DisabledTransportError","Warning","Information","catch","lastIndexOf","isBrowser","aTag","window","document","createElement","href","index","substring","actualTransport","_transport","_buffer","_executing","_sendBufferedData","PromiseSource","_transportResult","_sendLoopPromise","_sendLoop","_bufferData","promise","transportResult","_concatBuffers","arrayBuffers","totalLength","b","byteLength","reduce","a","result","Uint8Array","offset","item","set","buffer","_resolver","_rejecter","reason"],"mappings":"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","sourcesContent":["\"use strict\";\r\n// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TransportSendQueue = exports.HttpConnection = void 0;\r\nconst AccessTokenHttpClient_1 = require(\"./AccessTokenHttpClient\");\r\nconst DefaultHttpClient_1 = require(\"./DefaultHttpClient\");\r\nconst Errors_1 = require(\"./Errors\");\r\nconst ILogger_1 = require(\"./ILogger\");\r\nconst ITransport_1 = require(\"./ITransport\");\r\nconst LongPollingTransport_1 = require(\"./LongPollingTransport\");\r\nconst ServerSentEventsTransport_1 = require(\"./ServerSentEventsTransport\");\r\nconst Utils_1 = require(\"./Utils\");\r\nconst WebSocketTransport_1 = require(\"./WebSocketTransport\");\r\nconst MAX_REDIRECTS = 100;\r\n/** @private */\r\nclass HttpConnection {\r\n    constructor(url, options = {}) {\r\n        this._stopPromiseResolver = () => { };\r\n        this.features = {};\r\n        this._negotiateVersion = 1;\r\n        Utils_1.Arg.isRequired(url, \"url\");\r\n        this._logger = Utils_1.createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        }\r\n        else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\r\n        let webSocketModule = null;\r\n        let eventSourceModule = null;\r\n        if (Utils_1.Platform.isNode && typeof require !== \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            webSocketModule = requireFunc(\"ws\");\r\n            eventSourceModule = requireFunc(\"eventsource\");\r\n        }\r\n        if (!Utils_1.Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        }\r\n        else if (Utils_1.Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n        if (!Utils_1.Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        }\r\n        else if (Utils_1.Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n        this._httpClient = new AccessTokenHttpClient_1.AccessTokenHttpClient(options.httpClient || new DefaultHttpClient_1.DefaultHttpClient(this._logger), options.accessTokenFactory);\r\n        this._connectionState = \"Disconnected\" /* Disconnected */;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async start(transferFormat) {\r\n        transferFormat = transferFormat || ITransport_1.TransferFormat.Binary;\r\n        Utils_1.Arg.isIn(transferFormat, ITransport_1.TransferFormat, \"transferFormat\");\r\n        this._logger.log(ILogger_1.LogLevel.Debug, `Starting connection with transfer format '${ITransport_1.TransferFormat[transferFormat]}'.`);\r\n        if (this._connectionState !== \"Disconnected\" /* Disconnected */) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n        this._connectionState = \"Connecting\" /* Connecting */;\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState === \"Disconnecting\" /* Disconnecting */) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(ILogger_1.LogLevel.Error, message);\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n            return Promise.reject(new Errors_1.AbortError(message));\r\n        }\r\n        else if (this._connectionState !== \"Connected\" /* Connected */) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(ILogger_1.LogLevel.Error, message);\r\n            return Promise.reject(new Errors_1.AbortError(message));\r\n        }\r\n        this._connectionStarted = true;\r\n    }\r\n    send(data) {\r\n        if (this._connectionState !== \"Connected\" /* Connected */) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport);\r\n        }\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n    async stop(error) {\r\n        if (this._connectionState === \"Disconnected\" /* Disconnected */) {\r\n            this._logger.log(ILogger_1.LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n        if (this._connectionState === \"Disconnecting\" /* Disconnecting */) {\r\n            this._logger.log(ILogger_1.LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n        this._connectionState = \"Disconnecting\" /* Disconnecting */;\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n    async _stopInternal(error) {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n        try {\r\n            await this._startInternalPromise;\r\n        }\r\n        catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            }\r\n            catch (e) {\r\n                this._logger.log(ILogger_1.LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n            this.transport = undefined;\r\n        }\r\n        else {\r\n            this._logger.log(ILogger_1.LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n    async _startInternal(transferFormat) {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n        this._httpClient._accessTokenFactory = this._accessTokenFactory;\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === ITransport_1.HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(ITransport_1.HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                }\r\n                else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            }\r\n            else {\r\n                let negotiateResponse = null;\r\n                let redirects = 0;\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === \"Disconnecting\" /* Disconnecting */ || this._connectionState === \"Disconnected\" /* Disconnected */) {\r\n                        throw new Errors_1.AbortError(\"The connection was stopped during negotiation.\");\r\n                    }\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n                    if (negotiateResponse.ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                        // set the factory to undefined so the AccessTokenHttpClient won't retry with the same token, since we know it won't change until a connection restart\r\n                        this._httpClient._accessToken = accessToken;\r\n                        this._httpClient._accessTokenFactory = undefined;\r\n                    }\r\n                    redirects++;\r\n                } while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n            if (this.transport instanceof LongPollingTransport_1.LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n            if (this._connectionState === \"Connecting\" /* Connecting */) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(ILogger_1.LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = \"Connected\" /* Connected */;\r\n            }\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        }\r\n        catch (e) {\r\n            this._logger.log(ILogger_1.LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = \"Disconnected\" /* Disconnected */;\r\n            this.transport = undefined;\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    async _getNegotiationResponse(url) {\r\n        const headers = {};\r\n        const [name, value] = Utils_1.getUserAgentHeader();\r\n        headers[name] = value;\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(ILogger_1.LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n            const negotiateResponse = JSON.parse(response.content);\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            return negotiateResponse;\r\n        }\r\n        catch (e) {\r\n            let errorMessage = \"Failed to complete negotiation with the server: \" + e;\r\n            if (e instanceof Errors_1.HttpError) {\r\n                if (e.statusCode === 404) {\r\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\r\n                }\r\n            }\r\n            this._logger.log(ILogger_1.LogLevel.Error, errorMessage);\r\n            return Promise.reject(new Errors_1.FailedToNegotiateWithServerError(errorMessage));\r\n        }\r\n    }\r\n    _createConnectUrl(url, connectionToken) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n    async _createTransport(url, requestedTransport, negotiateResponse, requestedTransferFormat) {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(ILogger_1.LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n        const transportExceptions = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed:`);\r\n                transportExceptions.push(transportOrError);\r\n            }\r\n            else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    }\r\n                    catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                }\r\n                catch (ex) {\r\n                    this._logger.log(ILogger_1.LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(new Errors_1.FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, ITransport_1.HttpTransportType[endpoint.transport]));\r\n                    if (this._connectionState !== \"Connecting\" /* Connecting */) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(ILogger_1.LogLevel.Debug, message);\r\n                        return Promise.reject(new Errors_1.AbortError(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new Errors_1.AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n    _constructTransport(transport) {\r\n        switch (transport) {\r\n            case ITransport_1.HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport_1.WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent, this._options.WebSocket, this._options.headers || {});\r\n            case ITransport_1.HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport_1.ServerSentEventsTransport(this._httpClient, this._httpClient._accessToken, this._logger, this._options);\r\n            case ITransport_1.HttpTransportType.LongPolling:\r\n                return new LongPollingTransport_1.LongPollingTransport(this._httpClient, this._logger, this._options);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n    _startTransport(url, transferFormat) {\r\n        this.transport.onreceive = this.onreceive;\r\n        this.transport.onclose = (e) => this._stopConnection(e);\r\n        return this.transport.connect(url, transferFormat);\r\n    }\r\n    _resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat) {\r\n        const transport = ITransport_1.HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(ILogger_1.LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        }\r\n        else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => ITransport_1.TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === ITransport_1.HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === ITransport_1.HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(ILogger_1.LogLevel.Debug, `Skipping transport '${ITransport_1.HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new Errors_1.UnsupportedTransportError(`'${ITransport_1.HttpTransportType[transport]}' is not supported in your environment.`, transport);\r\n                    }\r\n                    else {\r\n                        this._logger.log(ILogger_1.LogLevel.Debug, `Selecting transport '${ITransport_1.HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            return this._constructTransport(transport);\r\n                        }\r\n                        catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this._logger.log(ILogger_1.LogLevel.Debug, `Skipping transport '${ITransport_1.HttpTransportType[transport]}' because it does not support the requested transfer format '${ITransport_1.TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${ITransport_1.HttpTransportType[transport]}' does not support ${ITransport_1.TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            }\r\n            else {\r\n                this._logger.log(ILogger_1.LogLevel.Debug, `Skipping transport '${ITransport_1.HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new Errors_1.DisabledTransportError(`'${ITransport_1.HttpTransportType[transport]}' is disabled by the client.`, transport);\r\n            }\r\n        }\r\n    }\r\n    _isITransport(transport) {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n    _stopConnection(error) {\r\n        this._logger.log(ILogger_1.LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n        this.transport = undefined;\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n        if (this._connectionState === \"Disconnected\" /* Disconnected */) {\r\n            this._logger.log(ILogger_1.LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n        if (this._connectionState === \"Connecting\" /* Connecting */) {\r\n            this._logger.log(ILogger_1.LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n        if (this._connectionState === \"Disconnecting\" /* Disconnecting */) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n        if (error) {\r\n            this._logger.log(ILogger_1.LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        }\r\n        else {\r\n            this._logger.log(ILogger_1.LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(ILogger_1.LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n        this.connectionId = undefined;\r\n        this._connectionState = \"Disconnected\" /* Disconnected */;\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            }\r\n            catch (e) {\r\n                this._logger.log(ILogger_1.LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n    _resolveUrl(url) {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n        if (!Utils_1.Platform.isBrowser) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n        this._logger.log(ILogger_1.LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n    _resolveNegotiateUrl(url) {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n        if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\r\n            negotiateUrl += index === -1 ? \"?\" : \"&\";\r\n            negotiateUrl += \"negotiateVersion=\" + this._negotiateVersion;\r\n        }\r\n        return negotiateUrl;\r\n    }\r\n}\r\nexports.HttpConnection = HttpConnection;\r\nfunction transportMatches(requestedTransport, actualTransport) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n/** @private */\r\nclass TransportSendQueue {\r\n    constructor(_transport) {\r\n        this._transport = _transport;\r\n        this._buffer = [];\r\n        this._executing = true;\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n    send(data) {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n    stop() {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n    _bufferData(data) {\r\n        if (this._buffer.length && typeof (this._buffer[0]) !== typeof (data)) {\r\n            throw new Error(`Expected data to be of type ${typeof (this._buffer)} but was of type ${typeof (data)}`);\r\n        }\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n    async _sendLoop() {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n                break;\r\n            }\r\n            this._sendBufferedData = new PromiseSource();\r\n            const transportResult = this._transportResult;\r\n            this._transportResult = undefined;\r\n            const data = typeof (this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n            this._buffer.length = 0;\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            }\r\n            catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n    static _concatBuffers(arrayBuffers) {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n        return result.buffer;\r\n    }\r\n}\r\nexports.TransportSendQueue = TransportSendQueue;\r\nclass PromiseSource {\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n    resolve() {\r\n        this._resolver();\r\n    }\r\n    reject(reason) {\r\n        this._rejecter(reason);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}