{"ast":null,"code":"\"use strict\"; // Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\NEWPORTG\\\\source\\\\Personal\\\\Azure Functions\\\\POC-Sendmail\\\\Src\\\\Viewer-App\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LongPollingTransport = void 0;\n\nconst AbortController_1 = require(\"./AbortController\");\n\nconst Errors_1 = require(\"./Errors\");\n\nconst ILogger_1 = require(\"./ILogger\");\n\nconst ITransport_1 = require(\"./ITransport\");\n\nconst Utils_1 = require(\"./Utils\"); // Not exported from 'index', this type is internal.\n\n/** @private */\n\n\nclass LongPollingTransport {\n  constructor(httpClient, logger, options) {\n    this._httpClient = httpClient;\n    this._logger = logger;\n    this._pollAbort = new AbortController_1.AbortController();\n    this._options = options;\n    this._running = false;\n    this.onreceive = null;\n    this.onclose = null;\n  } // This is an internal type, not exported from 'index' so this is really just internal.\n\n\n  get pollAborted() {\n    return this._pollAbort.aborted;\n  }\n\n  connect(url, transferFormat) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      Utils_1.Arg.isRequired(url, \"url\");\n      Utils_1.Arg.isRequired(transferFormat, \"transferFormat\");\n      Utils_1.Arg.isIn(transferFormat, ITransport_1.TransferFormat, \"transferFormat\");\n      _this._url = url;\n\n      _this._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) Connecting.\"); // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\n\n\n      if (transferFormat === ITransport_1.TransferFormat.Binary && typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\") {\n        throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\n      }\n\n      const [name, value] = Utils_1.getUserAgentHeader();\n      const headers = {\n        [name]: value,\n        ..._this._options.headers\n      };\n      const pollOptions = {\n        abortSignal: _this._pollAbort.signal,\n        headers,\n        timeout: 100000,\n        withCredentials: _this._options.withCredentials\n      };\n\n      if (transferFormat === ITransport_1.TransferFormat.Binary) {\n        pollOptions.responseType = \"arraybuffer\";\n      } // Make initial long polling request\n      // Server uses first long polling request to finish initializing connection and it returns without data\n\n\n      const pollUrl = `${url}&_=${Date.now()}`;\n\n      _this._logger.log(ILogger_1.LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n\n      const response = yield _this._httpClient.get(pollUrl, pollOptions);\n\n      if (response.statusCode !== 200) {\n        _this._logger.log(ILogger_1.LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`); // Mark running as false so that the poll immediately ends and runs the close logic\n\n\n        _this._closeError = new Errors_1.HttpError(response.statusText || \"\", response.statusCode);\n        _this._running = false;\n      } else {\n        _this._running = true;\n      }\n\n      _this._receiving = _this._poll(_this._url, pollOptions);\n    })();\n  }\n\n  _poll(url, pollOptions) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        while (_this2._running) {\n          try {\n            const pollUrl = `${url}&_=${Date.now()}`;\n\n            _this2._logger.log(ILogger_1.LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n\n            const response = yield _this2._httpClient.get(pollUrl, pollOptions);\n\n            if (response.statusCode === 204) {\n              _this2._logger.log(ILogger_1.LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\n\n              _this2._running = false;\n            } else if (response.statusCode !== 200) {\n              _this2._logger.log(ILogger_1.LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`); // Unexpected status code\n\n\n              _this2._closeError = new Errors_1.HttpError(response.statusText || \"\", response.statusCode);\n              _this2._running = false;\n            } else {\n              // Process the response\n              if (response.content) {\n                _this2._logger.log(ILogger_1.LogLevel.Trace, `(LongPolling transport) data received. ${Utils_1.getDataDetail(response.content, _this2._options.logMessageContent)}.`);\n\n                if (_this2.onreceive) {\n                  _this2.onreceive(response.content);\n                }\n              } else {\n                // This is another way timeout manifest.\n                _this2._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n              }\n            }\n          } catch (e) {\n            if (!_this2._running) {\n              // Log but disregard errors that occur after stopping\n              _this2._logger.log(ILogger_1.LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\n            } else {\n              if (e instanceof Errors_1.TimeoutError) {\n                // Ignore timeouts and reissue the poll.\n                _this2._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n              } else {\n                // Close the connection with the error as the result.\n                _this2._closeError = e;\n                _this2._running = false;\n              }\n            }\n          }\n        }\n      } finally {\n        _this2._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) Polling complete.\"); // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\n        // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\n\n\n        if (!_this2.pollAborted) {\n          _this2._raiseOnClose();\n        }\n      }\n    })();\n  }\n\n  send(data) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this3._running) {\n        return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\n      }\n\n      return Utils_1.sendMessage(_this3._logger, \"LongPolling\", _this3._httpClient, _this3._url, data, _this3._options);\n    })();\n  }\n\n  stop() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) Stopping polling.\"); // Tell receiving loop to stop, abort any current request, and then wait for it to finish\n\n\n      _this4._running = false;\n\n      _this4._pollAbort.abort();\n\n      try {\n        yield _this4._receiving; // Send DELETE to clean up long polling on the server\n\n        _this4._logger.log(ILogger_1.LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${_this4._url}.`);\n\n        const headers = {};\n        const [name, value] = Utils_1.getUserAgentHeader();\n        headers[name] = value;\n        const deleteOptions = {\n          headers: { ...headers,\n            ..._this4._options.headers\n          },\n          timeout: _this4._options.timeout,\n          withCredentials: _this4._options.withCredentials\n        };\n        yield _this4._httpClient.delete(_this4._url, deleteOptions);\n\n        _this4._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\n      } finally {\n        _this4._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) Stop finished.\"); // Raise close event here instead of in polling\n        // It needs to happen after the DELETE request is sent\n\n\n        _this4._raiseOnClose();\n      }\n    })();\n  }\n\n  _raiseOnClose() {\n    if (this.onclose) {\n      let logMessage = \"(LongPolling transport) Firing onclose event.\";\n\n      if (this._closeError) {\n        logMessage += \" Error: \" + this._closeError;\n      }\n\n      this._logger.log(ILogger_1.LogLevel.Trace, logMessage);\n\n      this.onclose(this._closeError);\n    }\n  }\n\n}\n\nexports.LongPollingTransport = LongPollingTransport;","map":{"version":3,"sources":["C:/Users/NEWPORTG/source/Personal/Azure Functions/POC-Sendmail/node_modules/@microsoft/signalr/dist/cjs/LongPollingTransport.js"],"names":["Object","defineProperty","exports","value","LongPollingTransport","AbortController_1","require","Errors_1","ILogger_1","ITransport_1","Utils_1","constructor","httpClient","logger","options","_httpClient","_logger","_pollAbort","AbortController","_options","_running","onreceive","onclose","pollAborted","aborted","connect","url","transferFormat","Arg","isRequired","isIn","TransferFormat","_url","log","LogLevel","Trace","Binary","XMLHttpRequest","responseType","Error","name","getUserAgentHeader","headers","pollOptions","abortSignal","signal","timeout","withCredentials","pollUrl","Date","now","response","get","statusCode","_closeError","HttpError","statusText","_receiving","_poll","Information","content","getDataDetail","logMessageContent","e","message","TimeoutError","_raiseOnClose","send","data","Promise","reject","sendMessage","stop","abort","deleteOptions","delete","logMessage"],"mappings":"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","sourcesContent":["\"use strict\";\r\n// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LongPollingTransport = void 0;\r\nconst AbortController_1 = require(\"./AbortController\");\r\nconst Errors_1 = require(\"./Errors\");\r\nconst ILogger_1 = require(\"./ILogger\");\r\nconst ITransport_1 = require(\"./ITransport\");\r\nconst Utils_1 = require(\"./Utils\");\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nclass LongPollingTransport {\r\n    constructor(httpClient, logger, options) {\r\n        this._httpClient = httpClient;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController_1.AbortController();\r\n        this._options = options;\r\n        this._running = false;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    get pollAborted() {\r\n        return this._pollAbort.aborted;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Utils_1.Arg.isRequired(url, \"url\");\r\n        Utils_1.Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Utils_1.Arg.isIn(transferFormat, ITransport_1.TransferFormat, \"transferFormat\");\r\n        this._url = url;\r\n        this._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === ITransport_1.TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n        const [name, value] = Utils_1.getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n        const pollOptions = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n        if (transferFormat === ITransport_1.TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(ILogger_1.LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(ILogger_1.LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new Errors_1.HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        }\r\n        else {\r\n            this._running = true;\r\n        }\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n    async _poll(url, pollOptions) {\r\n        try {\r\n            while (this._running) {\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(ILogger_1.LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(ILogger_1.LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n                        this._running = false;\r\n                    }\r\n                    else if (response.statusCode !== 200) {\r\n                        this._logger.log(ILogger_1.LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n                        // Unexpected status code\r\n                        this._closeError = new Errors_1.HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    }\r\n                    else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(ILogger_1.LogLevel.Trace, `(LongPolling transport) data received. ${Utils_1.getDataDetail(response.content, this._options.logMessageContent)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        }\r\n                        else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(ILogger_1.LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    }\r\n                    else {\r\n                        if (e instanceof Errors_1.TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                        else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            this._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n    async send(data) {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return Utils_1.sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url, data, this._options);\r\n    }\r\n    async stop() {\r\n        this._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n        try {\r\n            await this._receiving;\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(ILogger_1.LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n            const headers = {};\r\n            const [name, value] = Utils_1.getUserAgentHeader();\r\n            headers[name] = value;\r\n            const deleteOptions = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n            await this._httpClient.delete(this._url, deleteOptions);\r\n            this._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        }\r\n        finally {\r\n            this._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n    _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(ILogger_1.LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\nexports.LongPollingTransport = LongPollingTransport;\r\n"]},"metadata":{},"sourceType":"script"}