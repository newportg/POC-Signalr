{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\NEWPORTG\\\\source\\\\Personal\\\\Azure Functions\\\\POC-Sendmail\\\\Src\\\\Viewer-App\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\nimport { LogLevel } from \"./ILogger\";\nimport { Platform, getGlobalThis, isArrayBuffer } from \"./Utils\";\nexport class FetchHttpClient extends HttpClient {\n  constructor(logger) {\n    super();\n    this._logger = logger;\n\n    if (typeof fetch === \"undefined\") {\n      // In order to ignore the dynamic require in webpack builds we need to do this magic\n      // @ts-ignore: TS doesn't know about these names\n      const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require; // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\n\n      this._jar = new (requireFunc(\"tough-cookie\").CookieJar)();\n      this._fetchType = requireFunc(\"node-fetch\"); // node-fetch doesn't have a nice API for getting and setting cookies\n      // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\n\n      this._fetchType = requireFunc(\"fetch-cookie\")(this._fetchType, this._jar);\n    } else {\n      this._fetchType = fetch.bind(getGlobalThis());\n    }\n\n    if (typeof AbortController === \"undefined\") {\n      // In order to ignore the dynamic require in webpack builds we need to do this magic\n      // @ts-ignore: TS doesn't know about these names\n      const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require; // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\n\n      this._abortControllerType = requireFunc(\"abort-controller\");\n    } else {\n      this._abortControllerType = AbortController;\n    }\n  }\n  /** @inheritDoc */\n\n\n  send(request) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // Check that abort was not signaled before calling send\n      if (request.abortSignal && request.abortSignal.aborted) {\n        throw new AbortError();\n      }\n\n      if (!request.method) {\n        throw new Error(\"No method defined.\");\n      }\n\n      if (!request.url) {\n        throw new Error(\"No url defined.\");\n      }\n\n      const abortController = new _this._abortControllerType();\n      let error; // Hook our abortSignal into the abort controller\n\n      if (request.abortSignal) {\n        request.abortSignal.onabort = () => {\n          abortController.abort();\n          error = new AbortError();\n        };\n      } // If a timeout has been passed in, setup a timeout to call abort\n      // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\n\n\n      let timeoutId = null;\n\n      if (request.timeout) {\n        const msTimeout = request.timeout;\n        timeoutId = setTimeout(() => {\n          abortController.abort();\n\n          _this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\n\n          error = new TimeoutError();\n        }, msTimeout);\n      }\n\n      if (request.content === \"\") {\n        request.content = undefined;\n      }\n\n      if (request.content) {\n        // Explicitly setting the Content-Type header for React Native on Android platform.\n        request.headers = request.headers || {};\n\n        if (isArrayBuffer(request.content)) {\n          request.headers[\"Content-Type\"] = \"application/octet-stream\";\n        } else {\n          request.headers[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\n        }\n      }\n\n      let response;\n\n      try {\n        response = yield _this._fetchType(request.url, {\n          body: request.content,\n          cache: \"no-cache\",\n          credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\n          headers: {\n            \"X-Requested-With\": \"XMLHttpRequest\",\n            ...request.headers\n          },\n          method: request.method,\n          mode: \"cors\",\n          redirect: \"follow\",\n          signal: abortController.signal\n        });\n      } catch (e) {\n        if (error) {\n          throw error;\n        }\n\n        _this._logger.log(LogLevel.Warning, `Error from HTTP request. ${e}.`);\n\n        throw e;\n      } finally {\n        if (timeoutId) {\n          clearTimeout(timeoutId);\n        }\n\n        if (request.abortSignal) {\n          request.abortSignal.onabort = null;\n        }\n      }\n\n      if (!response.ok) {\n        const errorMessage = yield deserializeContent(response, \"text\");\n        throw new HttpError(errorMessage || response.statusText, response.status);\n      }\n\n      const content = deserializeContent(response, request.responseType);\n      const payload = yield content;\n      return new HttpResponse(response.status, response.statusText, payload);\n    })();\n  }\n\n  getCookieString(url) {\n    let cookies = \"\";\n\n    if (Platform.isNode && this._jar) {\n      // @ts-ignore: unused variable\n      this._jar.getCookies(url, (e, c) => cookies = c.join(\"; \"));\n    }\n\n    return cookies;\n  }\n\n}\n\nfunction deserializeContent(response, responseType) {\n  let content;\n\n  switch (responseType) {\n    case \"arraybuffer\":\n      content = response.arrayBuffer();\n      break;\n\n    case \"text\":\n      content = response.text();\n      break;\n\n    case \"blob\":\n    case \"document\":\n    case \"json\":\n      throw new Error(`${responseType} is not supported.`);\n\n    default:\n      content = response.text();\n      break;\n  }\n\n  return content;\n}","map":{"version":3,"sources":["C:/Users/NEWPORTG/source/Personal/Azure Functions/POC-Sendmail/node_modules/@microsoft/signalr/dist/esm/FetchHttpClient.js"],"names":["AbortError","HttpError","TimeoutError","HttpClient","HttpResponse","LogLevel","Platform","getGlobalThis","isArrayBuffer","FetchHttpClient","constructor","logger","_logger","fetch","requireFunc","__webpack_require__","__non_webpack_require__","require","_jar","CookieJar","_fetchType","bind","AbortController","_abortControllerType","send","request","abortSignal","aborted","method","Error","url","abortController","error","onabort","abort","timeoutId","timeout","msTimeout","setTimeout","log","Warning","content","undefined","headers","response","body","cache","credentials","withCredentials","mode","redirect","signal","e","clearTimeout","ok","errorMessage","deserializeContent","statusText","status","responseType","payload","getCookieString","cookies","isNode","getCookies","c","join","arrayBuffer","text"],"mappings":";AAAA;AACA;AACA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,UAApD;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,cAAzC;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,SAASC,QAAT,EAAmBC,aAAnB,EAAkCC,aAAlC,QAAuD,SAAvD;AACA,OAAO,MAAMC,eAAN,SAA8BN,UAA9B,CAAyC;AAC5CO,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB;AACA,SAAKC,OAAL,GAAeD,MAAf;;AACA,QAAI,OAAOE,KAAP,KAAiB,WAArB,EAAkC;AAC9B;AACA;AACA,YAAMC,WAAW,GAAG,OAAOC,mBAAP,KAA+B,UAA/B,GAA4CC,uBAA5C,GAAsEC,OAA1F,CAH8B,CAI9B;;AACA,WAAKC,IAAL,GAAY,KAAKJ,WAAW,CAAC,cAAD,CAAZ,CAA8BK,SAAlC,GAAZ;AACA,WAAKC,UAAL,GAAkBN,WAAW,CAAC,YAAD,CAA7B,CAN8B,CAO9B;AACA;;AACA,WAAKM,UAAL,GAAkBN,WAAW,CAAC,cAAD,CAAX,CAA4B,KAAKM,UAAjC,EAA6C,KAAKF,IAAlD,CAAlB;AACH,KAVD,MAWK;AACD,WAAKE,UAAL,GAAkBP,KAAK,CAACQ,IAAN,CAAWd,aAAa,EAAxB,CAAlB;AACH;;AACD,QAAI,OAAOe,eAAP,KAA2B,WAA/B,EAA4C;AACxC;AACA;AACA,YAAMR,WAAW,GAAG,OAAOC,mBAAP,KAA+B,UAA/B,GAA4CC,uBAA5C,GAAsEC,OAA1F,CAHwC,CAIxC;;AACA,WAAKM,oBAAL,GAA4BT,WAAW,CAAC,kBAAD,CAAvC;AACH,KAND,MAOK;AACD,WAAKS,oBAAL,GAA4BD,eAA5B;AACH;AACJ;AACD;;;AACME,EAAAA,IAAI,CAACC,OAAD,EAAU;AAAA;;AAAA;AAChB;AACA,UAAIA,OAAO,CAACC,WAAR,IAAuBD,OAAO,CAACC,WAAR,CAAoBC,OAA/C,EAAwD;AACpD,cAAM,IAAI3B,UAAJ,EAAN;AACH;;AACD,UAAI,CAACyB,OAAO,CAACG,MAAb,EAAqB;AACjB,cAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACH;;AACD,UAAI,CAACJ,OAAO,CAACK,GAAb,EAAkB;AACd,cAAM,IAAID,KAAJ,CAAU,iBAAV,CAAN;AACH;;AACD,YAAME,eAAe,GAAG,IAAI,KAAI,CAACR,oBAAT,EAAxB;AACA,UAAIS,KAAJ,CAZgB,CAahB;;AACA,UAAIP,OAAO,CAACC,WAAZ,EAAyB;AACrBD,QAAAA,OAAO,CAACC,WAAR,CAAoBO,OAApB,GAA8B,MAAM;AAChCF,UAAAA,eAAe,CAACG,KAAhB;AACAF,UAAAA,KAAK,GAAG,IAAIhC,UAAJ,EAAR;AACH,SAHD;AAIH,OAnBe,CAoBhB;AACA;;;AACA,UAAImC,SAAS,GAAG,IAAhB;;AACA,UAAIV,OAAO,CAACW,OAAZ,EAAqB;AACjB,cAAMC,SAAS,GAAGZ,OAAO,CAACW,OAA1B;AACAD,QAAAA,SAAS,GAAGG,UAAU,CAAC,MAAM;AACzBP,UAAAA,eAAe,CAACG,KAAhB;;AACA,UAAA,KAAI,CAACtB,OAAL,CAAa2B,GAAb,CAAiBlC,QAAQ,CAACmC,OAA1B,EAAoC,4BAApC;;AACAR,UAAAA,KAAK,GAAG,IAAI9B,YAAJ,EAAR;AACH,SAJqB,EAInBmC,SAJmB,CAAtB;AAKH;;AACD,UAAIZ,OAAO,CAACgB,OAAR,KAAoB,EAAxB,EAA4B;AACxBhB,QAAAA,OAAO,CAACgB,OAAR,GAAkBC,SAAlB;AACH;;AACD,UAAIjB,OAAO,CAACgB,OAAZ,EAAqB;AACjB;AACAhB,QAAAA,OAAO,CAACkB,OAAR,GAAkBlB,OAAO,CAACkB,OAAR,IAAmB,EAArC;;AACA,YAAInC,aAAa,CAACiB,OAAO,CAACgB,OAAT,CAAjB,EAAoC;AAChChB,UAAAA,OAAO,CAACkB,OAAR,CAAgB,cAAhB,IAAkC,0BAAlC;AACH,SAFD,MAGK;AACDlB,UAAAA,OAAO,CAACkB,OAAR,CAAgB,cAAhB,IAAkC,0BAAlC;AACH;AACJ;;AACD,UAAIC,QAAJ;;AACA,UAAI;AACAA,QAAAA,QAAQ,SAAS,KAAI,CAACxB,UAAL,CAAgBK,OAAO,CAACK,GAAxB,EAA6B;AAC1Ce,UAAAA,IAAI,EAAEpB,OAAO,CAACgB,OAD4B;AAE1CK,UAAAA,KAAK,EAAE,UAFmC;AAG1CC,UAAAA,WAAW,EAAEtB,OAAO,CAACuB,eAAR,KAA4B,IAA5B,GAAmC,SAAnC,GAA+C,aAHlB;AAI1CL,UAAAA,OAAO,EAAE;AACL,gCAAoB,gBADf;AAEL,eAAGlB,OAAO,CAACkB;AAFN,WAJiC;AAQ1Cf,UAAAA,MAAM,EAAEH,OAAO,CAACG,MAR0B;AAS1CqB,UAAAA,IAAI,EAAE,MAToC;AAU1CC,UAAAA,QAAQ,EAAE,QAVgC;AAW1CC,UAAAA,MAAM,EAAEpB,eAAe,CAACoB;AAXkB,SAA7B,CAAjB;AAaH,OAdD,CAeA,OAAOC,CAAP,EAAU;AACN,YAAIpB,KAAJ,EAAW;AACP,gBAAMA,KAAN;AACH;;AACD,QAAA,KAAI,CAACpB,OAAL,CAAa2B,GAAb,CAAiBlC,QAAQ,CAACmC,OAA1B,EAAoC,4BAA2BY,CAAE,GAAjE;;AACA,cAAMA,CAAN;AACH,OArBD,SAsBQ;AACJ,YAAIjB,SAAJ,EAAe;AACXkB,UAAAA,YAAY,CAAClB,SAAD,CAAZ;AACH;;AACD,YAAIV,OAAO,CAACC,WAAZ,EAAyB;AACrBD,UAAAA,OAAO,CAACC,WAAR,CAAoBO,OAApB,GAA8B,IAA9B;AACH;AACJ;;AACD,UAAI,CAACW,QAAQ,CAACU,EAAd,EAAkB;AACd,cAAMC,YAAY,SAASC,kBAAkB,CAACZ,QAAD,EAAW,MAAX,CAA7C;AACA,cAAM,IAAI3C,SAAJ,CAAcsD,YAAY,IAAIX,QAAQ,CAACa,UAAvC,EAAmDb,QAAQ,CAACc,MAA5D,CAAN;AACH;;AACD,YAAMjB,OAAO,GAAGe,kBAAkB,CAACZ,QAAD,EAAWnB,OAAO,CAACkC,YAAnB,CAAlC;AACA,YAAMC,OAAO,SAASnB,OAAtB;AACA,aAAO,IAAIrC,YAAJ,CAAiBwC,QAAQ,CAACc,MAA1B,EAAkCd,QAAQ,CAACa,UAA3C,EAAuDG,OAAvD,CAAP;AAjFgB;AAkFnB;;AACDC,EAAAA,eAAe,CAAC/B,GAAD,EAAM;AACjB,QAAIgC,OAAO,GAAG,EAAd;;AACA,QAAIxD,QAAQ,CAACyD,MAAT,IAAmB,KAAK7C,IAA5B,EAAkC;AAC9B;AACA,WAAKA,IAAL,CAAU8C,UAAV,CAAqBlC,GAArB,EAA0B,CAACsB,CAAD,EAAIa,CAAJ,KAAUH,OAAO,GAAGG,CAAC,CAACC,IAAF,CAAO,IAAP,CAA9C;AACH;;AACD,WAAOJ,OAAP;AACH;;AAxH2C;;AA0HhD,SAASN,kBAAT,CAA4BZ,QAA5B,EAAsCe,YAAtC,EAAoD;AAChD,MAAIlB,OAAJ;;AACA,UAAQkB,YAAR;AACI,SAAK,aAAL;AACIlB,MAAAA,OAAO,GAAGG,QAAQ,CAACuB,WAAT,EAAV;AACA;;AACJ,SAAK,MAAL;AACI1B,MAAAA,OAAO,GAAGG,QAAQ,CAACwB,IAAT,EAAV;AACA;;AACJ,SAAK,MAAL;AACA,SAAK,UAAL;AACA,SAAK,MAAL;AACI,YAAM,IAAIvC,KAAJ,CAAW,GAAE8B,YAAa,oBAA1B,CAAN;;AACJ;AACIlB,MAAAA,OAAO,GAAGG,QAAQ,CAACwB,IAAT,EAAV;AACA;AAbR;;AAeA,SAAO3B,OAAP;AACH","sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { Platform, getGlobalThis, isArrayBuffer } from \"./Utils\";\r\nexport class FetchHttpClient extends HttpClient {\r\n    constructor(logger) {\r\n        super();\r\n        this._logger = logger;\r\n        if (typeof fetch === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n            this._jar = new (requireFunc(\"tough-cookie\")).CookieJar();\r\n            this._fetchType = requireFunc(\"node-fetch\");\r\n            // node-fetch doesn't have a nice API for getting and setting cookies\r\n            // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n            this._fetchType = requireFunc(\"fetch-cookie\")(this._fetchType, this._jar);\r\n        }\r\n        else {\r\n            this._fetchType = fetch.bind(getGlobalThis());\r\n        }\r\n        if (typeof AbortController === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n            this._abortControllerType = requireFunc(\"abort-controller\");\r\n        }\r\n        else {\r\n            this._abortControllerType = AbortController;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    async send(request) {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            throw new AbortError();\r\n        }\r\n        if (!request.method) {\r\n            throw new Error(\"No method defined.\");\r\n        }\r\n        if (!request.url) {\r\n            throw new Error(\"No url defined.\");\r\n        }\r\n        const abortController = new this._abortControllerType();\r\n        let error;\r\n        // Hook our abortSignal into the abort controller\r\n        if (request.abortSignal) {\r\n            request.abortSignal.onabort = () => {\r\n                abortController.abort();\r\n                error = new AbortError();\r\n            };\r\n        }\r\n        // If a timeout has been passed in, setup a timeout to call abort\r\n        // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\r\n        let timeoutId = null;\r\n        if (request.timeout) {\r\n            const msTimeout = request.timeout;\r\n            timeoutId = setTimeout(() => {\r\n                abortController.abort();\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                error = new TimeoutError();\r\n            }, msTimeout);\r\n        }\r\n        if (request.content === \"\") {\r\n            request.content = undefined;\r\n        }\r\n        if (request.content) {\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            request.headers = request.headers || {};\r\n            if (isArrayBuffer(request.content)) {\r\n                request.headers[\"Content-Type\"] = \"application/octet-stream\";\r\n            }\r\n            else {\r\n                request.headers[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\r\n            }\r\n        }\r\n        let response;\r\n        try {\r\n            response = await this._fetchType(request.url, {\r\n                body: request.content,\r\n                cache: \"no-cache\",\r\n                credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\r\n                headers: {\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...request.headers,\r\n                },\r\n                method: request.method,\r\n                mode: \"cors\",\r\n                redirect: \"follow\",\r\n                signal: abortController.signal,\r\n            });\r\n        }\r\n        catch (e) {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            this._logger.log(LogLevel.Warning, `Error from HTTP request. ${e}.`);\r\n            throw e;\r\n        }\r\n        finally {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = null;\r\n            }\r\n        }\r\n        if (!response.ok) {\r\n            const errorMessage = await deserializeContent(response, \"text\");\r\n            throw new HttpError(errorMessage || response.statusText, response.status);\r\n        }\r\n        const content = deserializeContent(response, request.responseType);\r\n        const payload = await content;\r\n        return new HttpResponse(response.status, response.statusText, payload);\r\n    }\r\n    getCookieString(url) {\r\n        let cookies = \"\";\r\n        if (Platform.isNode && this._jar) {\r\n            // @ts-ignore: unused variable\r\n            this._jar.getCookies(url, (e, c) => cookies = c.join(\"; \"));\r\n        }\r\n        return cookies;\r\n    }\r\n}\r\nfunction deserializeContent(response, responseType) {\r\n    let content;\r\n    switch (responseType) {\r\n        case \"arraybuffer\":\r\n            content = response.arrayBuffer();\r\n            break;\r\n        case \"text\":\r\n            content = response.text();\r\n            break;\r\n        case \"blob\":\r\n        case \"document\":\r\n        case \"json\":\r\n            throw new Error(`${responseType} is not supported.`);\r\n        default:\r\n            content = response.text();\r\n            break;\r\n    }\r\n    return content;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}